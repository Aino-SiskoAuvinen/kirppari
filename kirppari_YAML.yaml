openapi: 3.1.0
info:
  title: kirppari
  version: '1.0'
  summary: Platform for selling and buying stuff
  description: simple api for reselling stuff
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '401':
          description: Unauthorized
        '404':
          description: User Not Found
        '418':
          description: I'm a teapot (RFC 2324)
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  userId: 142
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  phoneNumber: 040-1231234
                  location: Linnanmaki
                  username: alice
                  password: jotainkauheaasotkua
      security:
        - jwt: []
    put:
      summary: Update user information by userId
      operationId: put-users-userId
      responses:
        '200':
          description: OK
        '304':
          description: Not Modified
      description: Update user information by userId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  userId: 142
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  phoneNumber: 040-1231234
                  location: Linnanmaki
                  username: alice
                  password: jotainkauheaasotkua
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - jwt: []
    delete:
      summary: Delete user
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Delete user
      security:
        - jwt: []
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              'example ':
                value:
                  userId: 142
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  phoneNumber: 040-1231234
                  location: Linnanmaki
                  username: alice
                  password: jotainkauheaasotkua
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    get:
      summary: Get list of users
      operationId: get-user
      responses:
        '200':
          description: OK
        '418':
          description: I'm a teapot (RFC 2324)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  userId: 142
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  phoneNumber: 040-1231234
                  location: Linnanmaki
                  username: alice
                  password: jotainkauheaasotkua
    parameters: []
  /items:
    get:
      summary: Get list of items
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-items
    post:
      summary: Add new item
      operationId: post-items
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example-1:
                value:
                  itemId: '1'
                  title: hammasharja
                  description: vähän käytetty Jordanin hammasharja
                  prize: 5 €
                  category: hygienia
                  creationDay: '2019-08-24'
                  location: Oulu
                  username: alice
                  email: alices@gmail.com
                  Shipping: false
                  Pickup: true
                  image1: null
                  image2: null
                  image3: null
                  image4: null
      description: post new item
      security:
        - jwt: []
  '/items/id/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
    get:
      summary: Get item by itemId
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: get-items-itemId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      description: get items by itemId
    put:
      summary: Update item
      operationId: put-items-itemId
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      description: modify item by itemId
      security:
        - jwt: []
    delete:
      summary: Delete item
      operationId: delete-items-itemId
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      security:
        - jwt: []
  /login:
    post:
      summary: Login
      operationId: post-login
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: user loggin with http-basic
      security:
        - http-basic: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
            examples:
              example-1:
                value:
                  token: string
  'items/location/{location}':
    get:
      summary: Search by location
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: get-search
      description: Search items by location
    parameters:
      - schema:
          type: string
        name: location
        in: path
        required: true
  'items/category/{category}':
    get:
      summary: Search by category
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: get-search
      description: Search items by category
    parameters:
      - schema:
          type: string
        name: category
        in: path
        required: true
  'items/date/{date}':
    get:
      summary: Search by date
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: get-search
      description: Search items by location
    parameters:
      - schema:
          type: string
        name: date
        in: path
        required: true
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - userId: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          phoneNumber: 040-1231234
          location: Linnanmaki
          username: alice
          password: jotainkauheaasotkua
      properties:
        userId:
          type: string
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        location:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - userId
        - firstName
        - lastName
        - email
        - location
        - username
    Item:
      title: Item
      type: object
      description: ''
      examples:
        - itemId: 7f5bd501-d908-4bb2-a138-5b476da0d1b7
          title: paskaa
          description: paketissa
          price: '1000'
          category: nautintoaineet
          creationDay: '2022-02-24'
          Shipping: true
          Pickup: true
          username: muumi
          location: Linnanmaki
          email: alice.smith@gmail.com
          image1: ''
          image2: ''
          image3: ''
          image4: ''
      properties:
        itemId:
          type: string
        title:
          type: string
        description:
          type: string
        prize:
          type: string
        category:
          type: string
        creationDay:
          type: string
          format: date
        location:
          type: string
        username:
          type: string
        email:
          type: string
        shipping:
          type: boolean
          default: false
        pickup:
          type: boolean
          default: true
        image1:
          type: string
        image2:
          type: string
        image3:
          type: string
        image4:
          type: string
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
    http-basic:
      type: http
      scheme: basic
